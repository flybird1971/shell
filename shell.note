2015年 08月 06日 星期四 13:20:05 CST
---------------------------------------------------------------------------
shell   开始标记    #!/bin/bash        #指定Bash路径

shell脚本执行方式 ：
    作为sh命令参数      eg : sh script.sh  ,不需要开始标记  #!/bin/bash
    作为可执行文件      eg : ./script.sh   ,需要开始标记，并且要有执行权限

bash相关配置,保存在  ~/.bashrc文件中，类似vim配置。

在Bash中，每个命令或者命令序列以分号【;】或换行符【\n】分割。
    eg : cmd1;cmd2
    eg : cmd1
         cmd2
使用 #  作为单行注释

---------------------------------------------------------------------------
终端打印
    echo printContents;     #类似java中println打印并换行
    字符串 ""      对变量进行解释，并且要注意特殊字符，如 ！等
    字符串 ''      不能对变量进行解释，类似php
    不带引号       不推荐
    printf        类似c

    彩色打印
    echo -e  "\e[1;31m tees fonts color \e[0m";
    echo -e  "\e[1;42m test background color \e[0m";

---------------------------------------------------------------------------
变量与环境变量
    查看环境变量           env命令
    查看指定进程环境变量    cat /proc/$PID/environ    #pgrep vim 查看vim PID

    变量赋值    var='var copy'      #【=】左右两边无空格，表示赋值
    变量相等    var = 'var copy'    #【=】左右两边有空各，表示相等比较
    
    环境变量是未在当前进程中定义，而是从父进程中继承而来，
    eg : HTTP_PROXY='http:#192.169.12.12'
         export HTTP_PROXY    #设置环境变量HTTP_PROXY，类似select_editor
    
    获取变量字符长度  lenght=${#var};

    以下为系统变量实例：
        检测是否是超级用户
        if [ $UID -ne 0 ]; then
            echo "Non root user,please run as root ";
        else
            echo "Root user";
        fi

---------------------------------------------------------------------------
数学运算
    let命令    []     (())    expr  只支持整数运算
    eg : let result=num1+num2;     let num1++;  let num1+=5;  #变量名之前不需要加【$】符号
    eg : result=$[ num1 + num2 ];  result=$[ $num1 + 5 ];
    eg : result=$(( num1 + 3 ))
    eg : result=`expr 3 + 4`;      result=$( expr $num + 5);

    bc 高级数学元素，支持浮点数
    eg : echo "4 * 0.13" | bc;
    eg : result='echo "$num * 1.3" | bc';
    eg : echo "scale=2;3/8" | bc;

    bc 进制转换
    eg : echo "obase=2;ibase=10;$num" | bc;

    eg : echo "obase=8;$num" | bc;

---------------------------------------------------------------------------
文件描述符和重定向
    文件描述符是与文件输入，输出相关联的整数。
    常见文件描述符 stdin[0]  stdout[1]  stderr[2]
    可以讲某个文件描述符的内容重定向到另一个文件描述符中。
    
    eg : ls aaaaaa 2>>/tmp/error.log
         ls . 1>>/tmp/error.log
         ls ne 0>>/tmp/error.log

    PS : 脚本中所有输出重定向到文件中
    exec 1>>/tmp/log.log;

    当命令或者脚本发生错误时，返回非0退出状态；正常exit 0;
    /dev/null 特殊设备文件，所有丢到这个文件的信息都会被清除，通常称为位桶 或 黑洞
    
    PS : 输出重定向后，管道命令将不能接受到参数，
         可以使用  tee 将stdin中数据保留到副本中
         eg : ls -l | tee /tmp/out.log | wc -c
        
    文件重定向到命令，eg : ls -l < file
    重定向脚本内部的文本块    #<<EOF  和 EOF之间的数据都会作为stdin数据
         eg : #!/bin/bash
              cat <<EOF  > log.txt    #将<<eof占位符 内容进行cat,并将结果重定向到log.txt
              log file hearder
              this is a test log file
              EOF
    
    自定义文件描述符
        文件打开模式 【只读模式】，【截断模式】，【追加模式】
        <操作符  将文件读取至stdin中
        >操作符  截断模式的文件写入
        >>操作符 追加模式的文件写入
        
        exec 3</tmp/log.log    #将/tmp/log.log文件读入3中
        eg : cat <&3    
        
        exec 1>>/tmp/out.log  #将stdout文件描述符重写定义到/tmp/out.log
        eg : ls;   #将不会在屏幕显示，而是写入out.log文件中

---------------------------------------------------------------------------
数组和关联数组
    索引数组和关联数组；  类似php

    数组定义
    eg1 : varArr=(1 2 3 4 5 6);    #与php不同，以空格进行分割
    eg2 : varArr[0]='value1';
          varArr[1]='value2';
          ........
          varArr[n]='valueN';

    数组长度      length=${#varArr[@]};
    数组指定值    val=${varArr[$index]};
    整个数组      arr=${varArr[@]};
    删除指定值    unset varArr[$index];
    删除数组      unset varArr[@];
    数组分割      echo ${varArr[@]:offset:length};
                newArr=(${varArr[@]:offset:length});
                分割源数组，返回以空格分割的字符串，加（）可生产新数组

    数组遍历     for  var in ${varArr[@]};do
                    echo $var;
                    ..........
                 done

    关联数组    declare -A assionArr;    #声明assionArr关联数组
                 assionArr=([apple]='this apple' [orange]='this orange');
                assionArr[banner]='this banner';

                echo ${#assionArr[@]};   #打印关联数组长度
                echo ${assionArr[@]};    #打印关联数组
                echo ${!assionArr[@]};   #打印关联数组key

---------------------------------------------------------------------------
别名的使用
    alias name=' command seq';      #只在本bash中有效
    echo 'alias cmd="command seq"' >> ~/.bashrc  #导入bash配置文件,对所有有效
    alias rm='cp $@ ~/backup; rm $@';  #函数
    
---------------------------------------------------------------------------
获取终端信息
    tput & stty
    tput cols   #获取终端宽
    tput lines  #获取终端高
    stty size   #获取终端宽高

    tput longname   #获取终端名称
    tput setb no    #设置终端背景色 no【0-7】
    tput cup x y    #设置光标位置
    tput bold       #设置字体bold

---------------------------------------------------------------------------
获取,设置日期及延时    
    date "+%Y-%m-%d %H-%M-%S %N";
    date --date "Jan 20 2001" +%s;
    sleep times;

--------------------------------------------------------------------------
脚本调试
	bash -x debug.sh  #追踪shell脚本每一条语句
	set -x   #开启调试
	set +x　 #禁止调试     配合使用，只调试某段脚本
	set -v   #显示输入 
	set +v   #禁止显示输入 配合使用，只显示某段脚本
	自定义调试函数

--------------------------------------------------------------------------
shell函数
	函数定义	function funName(){ statements; }
				funName(){ statements; }
	函数调用	$funName;
				$funName arg1 arg2;	#传参数
	参数访问　　$1   #访问参数一
				$2	 #访问第二个参数
				.......
				$n	 #访问第n个参数
				$@	 #以列表的方式打印所有参数
				$*	 #类似$@，但参数被作为单个实体
	返回值		#return 0;　//可以使用　$? 获取函数或命令返回值

	函数递归　　function funName(){ 
					statement;
					funName;
					statement;
				}
	导入函数　　export -f funName;  #函数作用域将扩展到子进程
	
-------------------------------------------------------------------------
管道命令
	子shell　　( cd /datum; ls )
	反引用　　 `cd /datum; ls `
	从键盘或者stdin中读取数据 
	read -n charNumber tmpSaveVariable  
			eg : read -n 12 input;  输入的前12个字符将存入input变量,或者回车完成输入
	read -s input 输入的字符不回显.类似输入密码，回车完成输入
	read -p tipMsg input 回显tipMsg，回车完成输入
	read -t time input
			eg : read -t 5 input 5秒内的输入存入input变量
	read -d delim input 
			eg : read -d ">" input; 输入碰到定界符delim时，输入完成
	read -st 5 -d ">" input　混合使用选项

--------------------------------------------------------------------------
定界符和遍历
	IFS  internal field separator 定界符
	修改默认定界符	
		eg : oldIFS=$IFS;
			 todo .....
			 IFS=$oldIFS;
	PS : 定界符对数组定义初始化无影响，对遍历有影响，特别时字符串遍历

	for in   //list can be a string or a sequence
		eg : for item in list;do
				todo......
			 done

	    ps : list 可以是数组　or 字符串(按照定界符进行分割) or {a b c d}列表
	
	like c for
		eg : for (( i=0; i<10; i++)){
				todo....
			 }

	while循环
		eg : while condition;do
				todo....
			 done
	
	until循环
		eg : until conditon;do
				todo....
			 done

--------------------------------------------------------------------------
比较运算,整数比较和字符比较
	intger compare
	   [ int1 -eq int2 ]
	   [ int1 -ne int2 ]
	   [ int1 -gt int2 ]
       [ int1 -lt int2 ]
	   [ int1 -ge int2 ]
	   [ int1 -le int2 ]

	file compare    
	  PS : linux 中目录也是文件
	  [ -f $file_var ]  //目录或文件名
	  [ -x $file_var ]　//文件是否可执行
	  [ -d $file_var ]  //是否是目录
	  [ -e $file_var ]  //是否存在
	  [ -c $file_var ]  //是否是字符设备文件
	  [ -b $file_var ]　//是否是块设备文件
	  [ -L $file_var ]　//是否是链接符号
	  [ -w $file_var ]  //是否可写
	  [ -r $file_var ]  //是否可读

	string compare
	   [[ str = str ]]
	   [[ str == str ]]
	   [[ str != str ]]
	   [[ str > str ]]
	   [[ str < str ]]
	   [[ -z str ]]      //空字符串
	   [[ -n str ]]　　　//非空字符串


--------------------------------------------------------------------------
特殊变量
    $$ $? $0 $n $* $@ $#
    $$  当前shell进程id
    $?  脚本或者函数执行后返回状态码 eg : exit 0;
    $0  当前shell脚本名称
    $n  当前脚本或者函数参数； n为1,2,,,n  
    $*  当前脚本所有参数;  "$*" 将所有参数作为一个字符串输出
    $@  当前脚本所有参数； "$@" 将所有参数分别作为一个字符串输出
    $#  当前脚本或者函数参数个数

--------------------------------------------------------------------------
文件查找find
    find 沿着文件层次结构向下遍历，匹配符合条件的文件，并【执行】相应操作。
    -print   打印匹配文件或目录结果列表 "\n"作为分割文件定界符
    -print0  打印匹配文件或目录结果列表 "\0"作为分割文件定界符
    
    -name args      查找文件名为args    模糊查找 "*txt*"
    -iname args     同上，忽略大小写
    -path args      同上，查找整个路径名
    -regex args     同上，正则匹配
    !               取反
    -o -a           or | and  eg : find . \( ! -name "*txt" -a -path "*tmp*" \);

    -maxdepth       最大查找目录层次
    -mindepth       最小查找目录层次   eg : find . -mindepth 2 -maxdepth 5 -name "*log";
    
    -type args      按照文件类型过滤    
                    arg  -f   只列出文件
                         -d   只列出目录
                         -l   符号链接
                         -c   字符设备
                         -b   块设备
                         -p   fifo管道
                         -s  套接字
    -atime args     用户最近一次访问文件时间   eg find . -atime +1 //一天前访问
    -mtime args     用户最近一次修改文件时间   eg find . -mtime -1 //一天内修改
    -ctime args     文件元数据最后一次修改时间 eg find . -ctime 1  //一天

    -amin args      同上，以分钟作为计量单位
    -mmin args
    -cmin args  
    
    -size args      文件大小 eg : find . -type f -size +2k
                    单位 : b  c  w k  M  G
    -user args      文件所属用户
    -perm args      文件权限  eg : find . -type f -perm 644   //可执行

    -delete         
    -exec           执行   eg : find . -type f -print -exec chmod +x {} \;
    -prune          跳过指定目录进行查找
                    eg : find . \( -name ".git" prune \) -o \( -type f -print \)

--------------------------------------------------------------------------
xargs
    xagrs  以标准输入作为主要源数据流，使用stdin并通过提供命令行参数来执行其他命令；
           ps ： 解决不能从stdin中介绍输入的命令
           
           将多行数据转为单行       cat /tmp/log.log | xargs
           将单行数据分割为多行     cat /tmp/log.log | xargs -n 3
           使用指定定界符进行分割   echo -n "1123XabcX345Xdef" | xargs -d X
           循环 eg : ls | xargs -I {} cat -n {}

           PS : 子shell较好解决问题 eg : cat -n `ls`
           find . \( -name ".git" -prune \) -o \( -type f -print0 \) | xargs -0 cat -n 
           ls | ( $args=""; while read arg;do args="$args $arg"; done; cat -n $args )


--------------------------------------------------------------------------



--------------------------------------------------------------------------
linux_shell  page67   2.6.1

